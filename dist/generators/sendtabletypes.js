"use strict";
// tslint:disable:no-console
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fs_1 = __importDefault(require("fs"));
const _ = __importStar(require("lodash"));
const consts_1 = require("../consts");
const demo_1 = require("../demo");
const props_1 = require("../props");
function parseDemoFile(path) {
    fs_1.default.readFile(path, (err, buffer) => {
        assert_1.default.ifError(err);
        const demoFile = new demo_1.DemoFile();
        demoFile.entities.on("datatablesready", () => {
            console.log("// DO NOT MODIFY!");
            console.log("// Auto-generated by ./generators/sendtabletypes.ts");
            console.log("// tslint:disable:class-name");
            console.log("");
            console.log('import { EntityHandle } from "./entityhandle";');
            console.log();
            console.log("export interface Vector {\n  x: number;\n  y: number;\n  z: number;\n}");
            console.log();
            for (const dt of demoFile.entities.dataTables) {
                console.log(`export interface ${dt.netTableName} {`);
                let lastElemType;
                for (const prop of dt.props) {
                    let typeStr;
                    if ((prop.flags & props_1.SPROP_EXCLUDE) !== 0) {
                        console.log(`  // ${prop.dtName}.${prop.varName} - excluded`);
                        continue;
                    }
                    if (prop.type === 0 /* Int */) {
                        if (prop.numBits === 1) {
                            typeStr = "boolean";
                        }
                        else if (prop.numBits === consts_1.NUM_NETWORKED_EHANDLE_BITS &&
                            (prop.flags & props_1.SPROP_UNSIGNED) !== 0 &&
                            (prop.flags & props_1.SPROP_NOSCALE) !== 0) {
                            typeStr = "EntityHandle";
                        }
                        else {
                            typeStr = "number";
                        }
                    }
                    else if (prop.type === 1 /* Float */) {
                        typeStr = "number";
                    }
                    else if (prop.type === 2 /* Vector */) {
                        typeStr = "Vector";
                    }
                    else if (prop.type === 3 /* VectorXY */) {
                        typeStr = "Vector";
                    }
                    else if (prop.type === 4 /* String */) {
                        typeStr = "string";
                    }
                    else if (prop.type === 5 /* Array */) {
                        if (typeof lastElemType === "undefined")
                            throw new Error("Array prop type was not preceded by SPROP_INSIDEARRAY");
                        typeStr = lastElemType + "[]";
                    }
                    else if (prop.type === 6 /* DataTable */) {
                        console.log(`  // ${prop.varName}: DataTable;`);
                        continue;
                    }
                    else if (prop.type === 7 /* Int64 */) {
                        typeStr = "Long";
                    }
                    else {
                        throw new Error(`Unexpected prop type ${prop.type}`);
                    }
                    // Skip inside array - we'll print the PropType.Array
                    // which will follow immediately after this prop
                    if ((prop.flags & props_1.SPROP_INSIDEARRAY) !== 0) {
                        console.log(`  // ${prop.varName}: ${typeStr} - InsideArray;`);
                        lastElemType = typeStr;
                        continue;
                    }
                    let name = prop.varName;
                    if (name.charCodeAt(0) < 65 ||
                        name.indexOf(".") !== -1 ||
                        name.indexOf("[") !== -1) {
                        name = `["${name}"]`;
                    }
                    console.log(`  ${name}: ${typeStr};`);
                }
                console.log("}");
                console.log();
            }
            for (const serverClass of demoFile.entities.serverClasses) {
                const dataTableNames = _.keys(_.groupBy(serverClass.flattenedProps, flat => flat.table.netTableName));
                console.log(`export interface ${serverClass.name} {`);
                for (const dataTable of dataTableNames) {
                    if (dataTable === "DT_AnimTimeMustBeFirst") {
                        continue;
                    }
                    console.log(`  ${dataTable}: ${dataTable};`);
                }
                console.log(`}`);
                console.log("");
            }
            demoFile.cancel();
        });
        demoFile.parse(buffer);
    });
}
parseDemoFile(process.argv[2]);
//# sourceMappingURL=sendtabletypes.js.map